;;; init-evil.el -- My evil mode configuration.
;;; Commentary:
;;; Code:
(defun air--config-evil-leader ()
  "Configure evil leader mode."
  (evil-leader/set-leader ",")
 ;; (setq evil-leader/in-all-states 1)
  (evil-leader/set-key
    ","  'avy-goto-char-2
    "."  'switch-to-previous-buffer
    ":"  'eval-expression
    "aa" 'align-regexp
    "a=" 'my-align-single-equals
    "b"  'helm-mini             ;; Switch to another buffer
    "B"  'magit-blame-toggle
    "c"  'comment-dwim
    "d"  (lambda () (interactive) (evil-ex-call-command nil "bdelete" nil))
    "D"  'open-current-line-in-codebase-search
    "f"  'helm-imenu            ;; Jump to function in buffer
    "g"  'magit-status
    "h"  'fontify-and-browse    ;; HTML-ize the buffer and browse the result
    "l"  'whitespace-mode       ;; Show invisible characters
    "nn" 'narrow-and-set-normal ;; Narrow to region and enter normal mode
    "nw" 'widen
    "o"  'delete-other-windows  ;; C-w
    "r"  'helm-projectile-find-file        
    "R"  (lambda () (interactive) (font-lock-fontify-buffer) (redraw-display))
    "s"  'ag-project            ;; Ag search from project's root
    "S"  'delete-trailing-whitespace
    "t"  'gtags-reindex
    "T"  'gtags-find-tag
    "w"  'save-buffer
    "x"  'helm-M-x
    "y"  'yank-to-x-clipboard)

  (defun magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively."
    (interactive)
    (if (and (boundp 'magit-blame-mode) magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame))))

; Either close the current elscreen, or if only one screen, use the ":wq" Evil
; command; this simulates the ":wq" behavior of Vim when used with tabs.
(defun vimlike-write-quit ()
  "Vimlike ':q' behavior: close current window if there are split windows;
otherwise, close current tab (elscreen)."
  (interactive)
  (let ((one-elscreen (elscreen-one-screen-p))
        (one-window (one-window-p))
        )
    (save-buffer)
    (cond
     ; if current tab has split windows in it, close the current live window
     ((not one-window)
      (delete-window) ; delete the current window
      (balance-windows) ; balance remaining windows
      nil)
     ; if there are multiple elscreens (tabs), close the current elscreen
     ((not one-elscreen)
      (elscreen-kill)
      nil)
     ; if there is only one elscreen, just try to quit (calling elscreen-kill
     ; will not work, because elscreen-kill fails if there is only one
     ; elscreen)
     (one-elscreen
      (evil-quit)
      nil)
     )))

(defun air--config-evil ()
  "Configure evil mode."
  ;; Use Emacs mode
  (evil-set-initial-state 'magit-log-edit-mode 'insert)
  (evil-set-initial-state 'git-rebase-mode 'emacs)
  (evil-set-initial-state 'sunshine-mode 'emacs)
  (evil-set-initial-state 'ag-mode 'emacs)
  (evil-set-initial-state 'dired-mode 'normal)
  (evil-set-initial-state 'wdired-mode 'normal)

  ;; Use insert mode
  (evil-set-initial-state 'twittering-edit-mode 'insert)
  (evil-set-initial-state 'magit-log-edit-mode 'insert)

  (add-to-list 'evil-buffer-regexps '("\\*magit:"))
  (add-to-list 'evil-buffer-regexps '("\\*Flycheck"))
  (add-to-list 'evil-emacs-state-modes 'flycheck-error-list-mode)

  (evil-add-hjkl-bindings ag-mode-map 'normal
    "n"   'evil-search-next
    "N"   'evil-search-previous
    "RET" 'compile-goto-error)

  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window)

  (evil-add-hjkl-bindings org-agenda-mode-map 'emacs
    "j"   'org-agenda-next-line
    "k"   'org-agenda-previous-line
    "RET" 'org-agenda-switch-to)

  (defun next-conflict-marker ()
    (interactive)
    (evil-next-visual-line)
    (if (not (search-forward-regexp "\\(>>>>\\|====\\|<<<<\\)" (point-max) t))
        (evil-previous-visual-line))
    (move-beginning-of-line nil))

  (defun previous-conflict-marker ()
    (interactive)
    (search-backward-regexp "\\(>>>>\\|====\\|<<<<\\)" (point-min) t)
    (move-beginning-of-line nil))

  (defun smp/open-file ()
    (interactive)
    (evil-ex "e "))

  (defun smp/new-tab ()
    (interactive)
    (evil-ex "tabe "))

  (defun smp/vsplit ()
    (interactive)
    (evil-ex "vsplit "))

  

  ;; Global bindings.
  (define-key evil-normal-state-map (kbd "C-S-P") 'helm-projectile-switch-project)
  (define-key evil-normal-state-map (kbd "C-p")   'helm-projectile)
  (define-key evil-normal-state-map (kbd "-")     'helm-find-files)
  (define-key evil-normal-state-map (kbd "C-]")   'gtags-find-tag-from-here)
  (define-key evil-normal-state-map (kbd "g/")    'occur-last-search)
  (define-key evil-normal-state-map (kbd "[i")    'show-first-occurrence)
  (define-key evil-insert-state-map (kbd "C-e")   'end-of-line) ;; I know...
  (define-key evil-insert-state-map (kbd "C-.")   'end-of-line) ;; I know...
  (define-key evil-insert-state-map (kbd "C-a")   'beginning-of-line) ;; I know...
  (define-key evil-insert-state-map [end]   'end-of-line) ;; I know...
  (global-set-key (kbd "<s-right>") 'move-end-of-line)
  (global-set-key (kbd "<s-left>") 'move-beginning-of-line)

  ;; My old Vim keybindings
  (define-key evil-normal-state-map (kbd "C-l")   'elscreen-previous) 
  (define-key evil-normal-state-map (kbd "C-b")   'elscreen-next) 
  (define-key evil-normal-state-map (kbd "C-t")   'smp/open-file)
  (define-key evil-normal-state-map (kbd "C-g")   'smp/new-tab)
  (define-key evil-normal-state-map (kbd "C-s")   'smp/vsplit)
  ;;(define-key evil-normal-state-map (kbd "C-r")   'helm-projectile-find-file)

  (evil-define-key 'normal php-mode-map (kbd "]n") 'next-conflict-marker)
  (evil-define-key 'normal php-mode-map (kbd "[n") 'previous-conflict-marker)
  (evil-define-key 'visual php-mode-map (kbd "]n") 'next-conflict-marker)
  (evil-define-key 'visual php-mode-map (kbd "[n") 'previous-conflict-marker)

  (evil-define-key 'normal org-mode-map (kbd "]n") 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map (kbd "[n") 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map (kbd "C-S-l") 'org-shiftright)
  (evil-define-key 'normal org-mode-map (kbd "C-S-h") 'org-shiftleft)
  (evil-define-key 'insert org-mode-map (kbd "C-S-l") 'org-shiftright)
  (evil-define-key 'insert org-mode-map (kbd "C-S-h") 'org-shiftleft)
  (evil-ex-define-cmd "noh" 'evil-search-highlight-persist-remove-all)
  
  
  
  


  (defun minibuffer-keyboard-quit ()
    "Abort recurive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  ;; Make escape quit everything, whenever possible.
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)

  ;; My own Ex commands.
  (evil-ex-define-cmd "om" 'octopress-status))

(use-package evil
  :ensure t
  :config
  (add-hook 'evil-mode-hook 'air--config-evil)
  (evil-mode 1)
  
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (air--config-evil-leader)))

(setq evil-leader/leader "," evil-leader/in-all-states t)


(use-package evil-jumper
  :ensure t
  :config
  (global-evil-jumper-mode))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(use-package evil-indent-textobject
  :ensure t)

(use-package evil-tabs
  :ensure t
  :config
  (global-evil-tabs-mode t))

(setq elscreen-tab-display-control nil)
(setq elscreen-tab-display-kill-screen nil)
(setq elscreen-display-screen-number nil)

(evil-set-initial-state 'magit-log-edit-mode 'insert)
(evil-set-initial-state 'git-rebase-mode 'emacs)
(evil-set-initial-state 'sunshine-mode 'emacs)
(evil-set-initial-state 'ag-mode 'emacs)
(evil-set-initial-state 'dired-mode 'normal)
(evil-set-initial-state 'wdired-mode 'normal)

(air--config-evil-leader)
(air--config-evil)
(setq evil-leader/leader "," evil-leader/in-all-states t)


(provide 'init-evil)
;;; init-evil.el ends here
